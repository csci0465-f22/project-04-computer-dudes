{"mappings":"AAAA,2aAaC,GAEA,SAAS,WAAU;IAElB,MAAM,WAAW,GAAG,QAAQ,CAAC;IAC7B,MAAM,mBAAmB,EAAE;IAC3B,IAAI;IACJ,IAAI;IAEJ,yHAGC,GACD,MAAM,SAAS,IAAI;QACjB,sBAAsB;QACtB,iBAAiB,MAAM,CAAC,GAAG,iBAAiB,MAAM;QAElD,IAAI;QACJ,SAAS,IAAI,CAAC,SAAS,CAAC,EAAC,CAAC,EAAC;YACzB,MAAM,MAAM,IAAI,CAAC,qBAAqB,GAAG,GAAG;YAC5C,IAAI,MAAM,GACR,QAAQ;YAEV,iBAAiB,IAAI,CAAC,MAAI;QAC5B;IAGF;IAEA,mJAGC,GACD,MAAM,WAAS,IAAI;QACjB,IAAI,eAAe,GAAG,MAAM,CAAC,kBAAkB,UAAQ,KAAK,4CAA4C;QACxG,eAAe,KAAK,GAAG,CAAC,cAAc,iBAAiB,MAAM,GAAE;QAE/D,IAAI,iBAAiB,gBAAe;YAClC,SAAS,IAAI,CAAC,kBAAkB,IAAI,EAAE;YACtC,iBAAiB;QACnB,CAAC;IAEH;IAGA,SAAS,OAAO,KAAK,EAAC;QACpB,WAAW;QAEX,GAAG,MAAM,CAAC,QACP,EAAE,CAAC,mBAAmB,UACtB,EAAE,CAAC,mBAAmB;QAEzB;QAGA,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAY;YACjC;YACA,MAAM,IAAI;QACZ;IAEF;IAEA,OAAO,EAAE,GAAG,CAAC,QAAQ,WAAW;QAC9B,SAAS,EAAE,CAAC,QAAQ;IAEtB;IAIA,OAAO;AACP","sources":["src/js/scroller.js"],"sourcesContent":["/**\r\n * This code provides the basic event management for our narrative visualization.\r\n * \r\n * It is a somewhat simplified and updated version of Jim Vallandingham's code that\r\n * went with his article \"So You Want to Build A Scroller\" \r\n * (https://vallandingham.me/scroller.html)\r\n * \r\n * Usage:\r\n * \r\n * const scroll = scroller();\r\n * scroll(d3.selectAll(\"section\"));\r\n * scroll.on(\"section-change\", (section)=>{});\r\n * \r\n */\r\n\r\n function scroller(){\r\n\r\n  const dispatch = d3.dispatch(\"section-change\"); \r\n  const sectionPositions = [];\r\n  let currentSection;\r\n  let sections;\r\n\r\n  /**\r\n   * This is an event handler for resize events.\r\n   * It is calculating the starting position of each section.\r\n   */\r\n  const resize = ()=>{\r\n    // clear out the array\r\n    sectionPositions.splice(0, sectionPositions.length);\r\n\r\n    let start;\r\n    sections.each(function(d,i){\r\n      const pos = this.getBoundingClientRect().top;\r\n      if (i === 0){\r\n        start = pos;\r\n      }\r\n      sectionPositions.push(pos-start);\r\n    });\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * This is an event handler that listens for scroll events.\r\n   * Its main job is figuring out which section is currently being viewed.\r\n   */\r\n  const position=()=>{\r\n    let sectionIndex = d3.bisect(sectionPositions, scrollY-50); // eslint-disable-line no-restricted-globals\r\n    sectionIndex = Math.min(sectionIndex, sectionPositions.length -1);\r\n\r\n    if (sectionIndex !== currentSection){\r\n      dispatch.call(\"section-change\", this, sectionIndex);\r\n      currentSection = sectionIndex;\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  function scroll(steps){\r\n    sections = steps;\r\n\r\n    d3.select(window)\r\n      .on('scroll.scroller', position)\r\n      .on('resize.scroller', resize);\r\n\r\n    resize();\r\n\r\n\r\n    const timer = d3.timer(function () {\r\n      position();\r\n      timer.stop();\r\n    });\r\n  \r\n  }\r\n\r\n  scroll.on = (action, callback)=>{\r\n    dispatch.on(action, callback);\r\n\r\n  }\r\n\r\n\r\n\r\n  return scroll;\r\n  }"],"names":[],"version":3,"file":"index.c900b4bf.js.map","sourceRoot":"/__parcel_source_root/"}